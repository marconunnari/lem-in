https://en.wikipedia.org/wiki/Minimum_spanning_tree

links_from(room)
	for link in links
		if ((link->room1 == room && link->room2 != room) ||
			(link->room1 != room && link->room2 == room))
			return (link)
	return (NULL)

put_cinnamon(root, cinnamon)
	foreach link in links_from(root)
		if (link->cinnamon == 0 || link->cinnamon > cinnamon)
			link->cinnamon = cinnamon
		if (link->room1 != root)
			putcinnamon(link->room1, cinnamon++)
		else
			putcinnamon(link->room2, cinnamon++)

get_other_room(link, room)
	if (link->room1 != room)
		return link->room1
	else
		return link->room2

get_next_room(room)
	uintmax_t	min_cinnamon
	t_room		*next;

	foreach link in links_from(room)
		if (get_other_room(link, room)->ant = 0 &&
			(!min_cinnamon || link->cinnamon < min_cinnamon))
			next = get_other_room(link, room);

move_ant_from_start(newfullrooms)
	next = get_next_room(start)
	start->ant -= li_info.start_ant;
	next->ant += li_info.start_ant;
	if (start->ant != 0)
		newfullrooms.add(start)
		li_info.start_ant++;
	newfullrooms.add(next)

move_ant(room, newfullrooms)
	next = get_next_room(room)
	next->ant += room->ant;
	room->ant = 0;
	newfullrooms.add(next)

move_ants(fullrooms)
	newfullrooms = NULL
	foreach room in fullrooms
		if (room == li_info.start)
			move_ant_from_start(&newfullrooms)
		else
			move_ant(room, &newfullrooms)
	free_rooms(fullrooms)
	move_ants(newfullrooms)

put_cinnamon(end, 1)
li_info.start_ant = 1;
move_ants(ft_lstnew(start, sizeof(t_room))
